{"input": [{"role": "system", "content": "You are an expert SQL developer. Write syntactically correct SQLite queries to answer the following questions.\n\nSchema:\nTable: employees (id, name, department_id, salary, hire_date, manager_id)\nTable: departments (id, name, location)\nTable: projects (id, name, department_id, budget, start_date, end_date)\nTable: employee_projects (employee_id, project_id, hours_worked)"}, {"role": "user", "content": "Find all employees who work on projects with a budget greater than $100,000 and show their names and the project names."}], "ideal": "SELECT DISTINCT e.name, p.name FROM employees e JOIN employee_projects ep ON e.id = ep.employee_id JOIN projects p ON ep.project_id = p.id WHERE p.budget > 100000;"}
{"input": [{"role": "system", "content": "You are an expert SQL developer. Write syntactically correct SQLite queries to answer the following questions.\n\nSchema:\nTable: employees (id, name, department_id, salary, hire_date, manager_id)\nTable: departments (id, name, location)\nTable: projects (id, name, department_id, budget, start_date, end_date)\nTable: employee_projects (employee_id, project_id, hours_worked)"}, {"role": "user", "content": "Get the total hours worked by each employee across all projects, including employee names."}], "ideal": "SELECT e.name, SUM(ep.hours_worked) as total_hours FROM employees e LEFT JOIN employee_projects ep ON e.id = ep.employee_id GROUP BY e.id, e.name;"}
{"input": [{"role": "system", "content": "You are an expert SQL developer. Write syntactically correct SQLite queries to answer the following questions.\n\nSchema:\nTable: employees (id, name, department_id, salary, hire_date, manager_id)\nTable: departments (id, name, location)\nTable: projects (id, name, department_id, budget, start_date, end_date)\nTable: employee_projects (employee_id, project_id, hours_worked)"}, {"role": "user", "content": "Find departments that have no active projects (projects with end_date in the future or NULL)."}], "ideal": "SELECT d.name FROM departments d WHERE NOT EXISTS (SELECT 1 FROM projects p WHERE p.department_id = d.id AND (p.end_date IS NULL OR p.end_date > DATE('now')));"}
{"input": [{"role": "system", "content": "You are an expert SQL developer. Write syntactically correct SQLite queries to answer the following questions.\n\nSchema:\nTable: employees (id, name, department_id, salary, hire_date, manager_id)\nTable: departments (id, name, location)\nTable: projects (id, name, department_id, budget, start_date, end_date)\nTable: employee_projects (employee_id, project_id, hours_worked)"}, {"role": "user", "content": "Calculate the average salary of employees in each department, but only for departments with more than 2 employees."}], "ideal": "SELECT d.name, AVG(e.salary) as avg_salary FROM departments d JOIN employees e ON d.id = e.department_id GROUP BY d.id, d.name HAVING COUNT(e.id) > 2;"}
{"input": [{"role": "system", "content": "You are an expert SQL developer. Write syntactically correct SQLite queries to answer the following questions.\n\nSchema:\nTable: employees (id, name, department_id, salary, hire_date, manager_id)\nTable: departments (id, name, location)\nTable: projects (id, name, department_id, budget, start_date, end_date)\nTable: employee_projects (employee_id, project_id, hours_worked)"}, {"role": "user", "content": "Find employees who earn more than their manager."}], "ideal": "SELECT e1.name as employee_name, e1.salary as employee_salary, e2.name as manager_name, e2.salary as manager_salary FROM employees e1 JOIN employees e2 ON e1.manager_id = e2.id WHERE e1.salary > e2.salary;"}
{"input": [{"role": "system", "content": "You are an expert SQL developer. Write syntactically correct SQLite queries to answer the following questions.\n\nSchema:\nTable: employees (id, name, department_id, salary, hire_date, manager_id)\nTable: departments (id, name, location)\nTable: projects (id, name, department_id, budget, start_date, end_date)\nTable: employee_projects (employee_id, project_id, hours_worked)"}, {"role": "user", "content": "Get the project with the highest total hours worked across all employees."}], "ideal": "SELECT p.name, SUM(ep.hours_worked) as total_hours FROM projects p JOIN employee_projects ep ON p.id = ep.project_id GROUP BY p.id, p.name ORDER BY total_hours DESC LIMIT 1;"}
{"input": [{"role": "system", "content": "You are an expert SQL developer. Write syntactically correct SQLite queries to answer the following questions.\n\nSchema:\nTable: employees (id, name, department_id, salary, hire_date, manager_id)\nTable: departments (id, name, location)\nTable: projects (id, name, department_id, budget, start_date, end_date)\nTable: employee_projects (employee_id, project_id, hours_worked)"}, {"role": "user", "content": "Find the second highest salary in each department."}], "ideal": "SELECT department_id, salary FROM (SELECT department_id, salary, ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) as rn FROM employees) WHERE rn = 2;"}
{"input": [{"role": "system", "content": "You are an expert SQL developer. Write syntactically correct SQLite queries to answer the following questions.\n\nSchema:\nTable: employees (id, name, department_id, salary, hire_date, manager_id)\nTable: departments (id, name, location)\nTable: projects (id, name, department_id, budget, start_date, end_date)\nTable: employee_projects (employee_id, project_id, hours_worked)"}, {"role": "user", "content": "List all employees who have worked on every project in their department."}], "ideal": "SELECT e.name FROM employees e WHERE NOT EXISTS (SELECT p.id FROM projects p WHERE p.department_id = e.department_id AND NOT EXISTS (SELECT 1 FROM employee_projects ep WHERE ep.employee_id = e.id AND ep.project_id = p.id));"}
{"input": [{"role": "system", "content": "You are an expert SQL developer. Write syntactically correct SQLite queries to answer the following questions.\n\nSchema:\nTable: employees (id, name, department_id, salary, hire_date, manager_id)\nTable: departments (id, name, location)\nTable: projects (id, name, department_id, budget, start_date, end_date)\nTable: employee_projects (employee_id, project_id, hours_worked)"}, {"role": "user", "content": "Calculate the total budget allocation per department, including departments with no projects (show 0 for those)."}], "ideal": "SELECT d.name, COALESCE(SUM(p.budget), 0) as total_budget FROM departments d LEFT JOIN projects p ON d.id = p.department_id GROUP BY d.id, d.name;"}
